from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram import Router, F

from utils import list_index
from states.save_state_bot import StateIndex
from cllasses.index_ import IndexSearch
from keyboards.inlaine_button import edit_button_index, select_menu_button

index_s = IndexSearch()
index_start_router = Router()
index_next_router = Router()


@index_start_router.callback_query(F.data == 'index')
async def start_index(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StateIndex.index)
    await callback.message.answer(text='üîª–í–∏–±—Ä–∞–Ω–∞ –æ–ø—Ü—ñ—è –ø–æ—à—É–∫—É –ø–æ —ñ–Ω–¥–µ–∫—Å—É\n'
                                       '‚ùóÔ∏è–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥—É  –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏  –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏\n'
                                       '‚ùóÔ∏è–ü—Ä–∏–∫–ª–∞–¥ –≤–≤–æ–¥—É: MAT.1.1\n'
                                       '‚ùóÔ∏è–¢—Ä–∏ –ª—ñ—Ç–µ—Ä–∏ —Ü–µ —ñ–Ω–¥–µ–∫—Å –∫–Ω–∏–≥–∏\n'
                                       '‚ùóÔ∏è–ü–µ—Ä—à–∞ —Ü–∏—Ñ—Ä–∞ —Ü–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤–∏\n'
                                       '‚ùóÔ∏è–î—Ä—É–≥–∞ —Ü–∏—Ñ—Ä–∞ —Ü–µ –Ω–æ–º–µ—Ä –≤—ñ—Ä—à–∞\n'
                                       '‚ùóÔ∏è–°–ø–∏—Å–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–∏–≤–∏—Ç–∏—Å—å /list\n'
                                       '‚ùóÔ∏è–î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ /cancel')

    await callback.answer('üîç')


@index_start_router.message(Command("list"))
async def get_list_index(message: Message):
    await message.answer(list_index.index_id, reply_markup=edit_button_index)


@index_start_router.message(Command("cancel"))
@index_start_router.message(F.text.casefold() == "cancel")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer(text='*–í—ñ–¥–º—ñ–Ω–µ–Ω–æ*, –≤–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=select_menu_button)


@index_start_router.message(StateIndex.index)
async def next_index_step(message: Message, state: FSMContext) -> None:
    try:
        index = message.text.strip()
        await state.update_data(index=index)
        answer_text = index_s.get_index(index=index)
        await message.answer(answer_text, reply_markup=edit_button_index)
        await state.clear()
    except KeyError:
        await message.reply(text='–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç', reply_markup=edit_button_index)

